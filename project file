// libraries
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// constants
#define MAX_BOOKS 50
#define MAX_MEMBERS 30
#define MAX_BORROW 150

// counts
int countBooks = 0;
int countMembers = 0;
int countBorrowed = 0;
int countdate = 0;

// lists of input
// 1.books
int booksList_ID_List[MAX_BOOKS];
int booksList_Copies_List[MAX_BOOKS];
// 2.member
int Members_ID_List[MAX_MEMBERS][2];
// 3.borrowed
int borrowed[MAX_BORROW][2];
int date[MAX_BORROW][3];

// declaration of functions
int Books_Borrowed_Days();
void books_unborrowed();
void list_member_books(int member);
void printBooksAvailable();
void printNumberBooks();
void overlapping(int bookID);
void mostBorrowedBook();
void Members_Less_n(int limit);
void Number_Members();
void List_Book_Borrowers(int bookID);
int Book_ID_min();
int Books_per_Members();
// checking functions
int checkDate(int i);

// main
int main()
{
  // input variables
  char section[50];
  char cmd[50];

  // sections and input
  while (fgets(section, sizeof(section), stdin) != NULL)
  {
    // books input
    if (strcmp(section, "Books:\n") == 0)
    {
      int books_ID;
      int books_Copies;

      while (1)
      {

        if (fgets(section, sizeof(section), stdin) == NULL)
        {
          printf("try again you enterd a null value\n");
          continue;
        }
        if (sscanf(section, "%d %d", &books_ID, &books_Copies) == 2 && countBooks < MAX_BOOKS)
        {

          if (books_ID <= 999 && books_ID >= 0 && books_Copies >= 0)
          {
            booksList_ID_List[countBooks] = books_ID;
            booksList_Copies_List[countBooks] = books_Copies;
            countBooks++;
          }
          else
          {
            printf("Invalid Input: ID must be less than or equal 3 chars; IDs and Copies must be positive.\n");
          }
        }
        else if (countBooks >= MAX_BOOKS)
        {
          printf("Max Books reached; cannot add more Books\n");
        }
        else if (strcmp(section, "Members:\n") == 0)
        {
          break;
        }
        else
        {
          printf("Wrong format: Use book_id book_copies.\n");
        }
      }
    }
    if (strcmp(section, "Members:\n") == 0)
    {
      int member_ID;

      while (1)
      {
        if (fgets(section, sizeof(section), stdin) == NULL)
        {
          printf("try again you enterd a null value\n");
          continue;
        }
        if (sscanf(section, "%d", &member_ID) == 1 && countMembers < MAX_MEMBERS)
        {
          if (member_ID <= 999999 && member_ID >= 0)
          {
            Members_ID_List[countMembers][0] = member_ID;
            countMembers++;
          }
          else
          {
            printf("Invalid Input: ID must be less than or equal 6 chars; IDs must be positive.\n");
          }
        }
        else if (countMembers >= MAX_MEMBERS)
        {
          printf("Max Members reached; cannot add more Members\n");
        }
        else if (strcmp(section, "Borrowed_Books:\n") == 0)
        {
          break;
        }
        else
        {
          printf("Wrong format: Use member_id\n");
        }
      }
    }

    if (strcmp(section, "Borrowed_Books:\n") == 0)
    {
      int booksBorrowed, membersBorrowed;
      int days, months, year;
      int foundMember;
      int foundBook;
      int checkBorrowingEqFive;

      while (true)
      {
        checkBorrowingEqFive = 0;
        foundBook = 0;
        if (fgets(section, sizeof(section), stdin) == NULL)
        {
          break;
        }
        if (sscanf(section, "%d %d %d/%d/%d", &booksBorrowed, &membersBorrowed, &days, &months, &year) == 5 && countBorrowed < MAX_BORROW)
        {
          if (year > 1900 && year < 2200 && months > 0 && months < 13 && days > 0 && days < 32)
          {
            borrowed[countBorrowed][0] = booksBorrowed;
            borrowed[countBorrowed][1] = membersBorrowed;
            date[countdate][0] = days;
            date[countdate][1] = months;
            date[countdate][2] = year;
          }
          else
          {
            printf("Invalid Input: Date must be realistic.\n");
            continue;
          }
        }
        else if (countBorrowed >= MAX_MEMBERS)
        {

          printf("Max Borrowed operation reached; cannot add more Operations\n");
          continue;
        }
        else if (section == NULL)
        {
          break;
        }
        else
        {
          printf("Wrong format: Use book_id member_id DAYS/MONTHS/YEARS\n");
          continue;
        }

        for (int i = 0; i < countBooks; i++)
        {

          if (borrowed[countBorrowed][0] == booksList_ID_List[i])
          {
            foundBook = 1;
            if (booksList_Copies_List[i] > 0)
            {
              booksList_Copies_List[i] = booksList_Copies_List[i] - 1;
            }
            else if (booksList_Copies_List[i] <= 0)
            {
              printf("There are no copies for this book\n");
              continue;
            }
          }
        }
        if (foundBook == 0)
        {
          printf("This book does not exist\n");
          continue;
        }
        for (int j = 0; j < countMembers; j++)
        {
          foundMember = 0;
          if (Members_ID_List[j][0] == borrowed[countBorrowed][1])
          {
            foundMember = 1;
            Members_ID_List[j][1]++;
            if( Members_ID_List[j][1] > 5){
            checkBorrowingEqFive = 1;
            }
            break;
          }
        }
        if(checkBorrowingEqFive){
          printf("Each member can borrow books up to 5 times.\n");
          continue;
        }
        if (foundMember == 0)
        {
          printf("This member does not exist\n");
          continue;
        }

        countBorrowed++;
        countdate++;
      }
      break;
    }
    if (strcmp(section, "Members:\n") != 0 && strcmp(section, "Borrowed_Books:\n") != 0 && strcmp(section, "Books:\n") != 0)
    {
      printf("this section does not exist\n");
    }
  }
  // commands
  while (true)
  {
    scanf("%50s", cmd);
    // Sama
    if (strcmp(cmd, "Number_Books") == 0)
    {
      printNumberBooks();
    }
    // Ahmed Stem
    else if (strcmp(cmd, "Number_Members") == 0)
    {
      Number_Members();
    }
    // hapipa
    else if (strcmp(cmd, "Book_ID_Min") == 0)
    {
      Book_ID_min();
    }
    // sama
    else if (strcmp(cmd, "Books_Available") == 0)
    {
      printBooksAvailable();
    }
    // Ahmed Stem
    else if (strcmp(cmd, "List_Book_Borrowers") == 0)
    {
      int bookID;
      scanf("%d", &bookID);
      List_Book_Borrowers(bookID);
    }
    // Ahmed Thanwya
    else if (strcmp(cmd, "List_Member_Books") == 0)
    {
      int member;
      scanf("%d", &member);
      list_member_books(member);
    }
    // basmalla
    else if (strcmp(cmd, "Most_Borrowed") == 0)
    {
      mostBorrowedBook();
    }
    // basmalla
    else if (strcmp(cmd, "Members_Less") == 0)
    {
      int limit;
      scanf("%d", &limit);
      Members_Less_n(limit);
    } // Ahmed Thanwya
    else if (strcmp(cmd, "Books_Unborrowed") == 0)
    {
      books_unborrowed();
    }
    else if (strcmp(cmd, "Books_Per_Member") == 0)
    {
      Books_per_Members();
    }
    else if (strcmp(cmd, "Books_Borrowed_Days") == 0)
    {
      Books_Borrowed_Days();
    }
    // sama
    else if (strcmp(cmd, "Overlapping_Borrowers") == 0)
    {
      int bookIDOver;
      scanf("%d", &bookIDOver);
      overlapping(bookIDOver);
    } // hapipa

    else if (strcmp(cmd, "Quit") == 0)
    {
      printf("Thanks!");
      break;
    }
    else
    {
      printf("Wrong command\n");
    }
  }
}


// check functions
int checkDate(int i)
{
  int check;

  for (int j = i; j >= 0; j--)
  {
    if (i != j || i == 0)
    {
      if ((date[i][0] != date[j][0] || date[i][1] != date[j][1] || date[i][2] != date[j][2]) || i == 0)
      {
        check = 1;
      }
      else
      {
        check = 0;
        break;
      }
    }
  }

  return check;
}

int Books_Borrowed_Days()
{
  int countUniqeDays;
  for (int i = 0; i < countdate; i++)
  {

    if (checkDate(i) == 1)
    {
      // printf("%d/%d/%d\n", date[i][0], date[i][1], date[i][2]);
      countUniqeDays++;
    }
  }
  printf("%d\n", countUniqeDays);
}
// Ahmed Thanwya
void books_unborrowed()
{
  int check;
  for (int i = 0; i < countBooks; i++)
  {
    check = 1;
    for (int j = 0; j < countBorrowed; j++)
    {
      if (booksList_ID_List[i] == borrowed[j][0])
      {
        check = 0;
        break;
      }
    }

    if (check == 1)
      printf("%d\n", booksList_ID_List[i]);
  }
}
// Ahmed Thanwya
void list_member_books(int member)
{
  int check = 1;
  for (int i = 0; i < countBorrowed; i++)
  {
    if (member == borrowed[i][1])
    {
      printf("%d\n", borrowed[i][0]);
      check = 0;
    }
  }
  if (check)
    printf("none\n");
}

// Sama
void printBooksAvailable()
{
  for (int i = 0; i < countBooks; i++)
  {
    if (booksList_Copies_List[i] > 0)
    {
      printf("%d\n", booksList_ID_List[i]);
    }
  }
}
// Sama
void printNumberBooks()
{
  printf("%d\n", countBooks);
}
// Sama
void overlapping(int bookID)
{
  int count = 0;
  int overlapping[countBorrowed];
  for (int i = 0; i < countBorrowed; i++)
  {
    if (borrowed[i][0] == bookID)
    {
      overlapping[count] = borrowed[i][1];
      count++;
    }
  }
  if (count >= 2)
  {
    for (int j = 0; j < count; j++)
    {
      printf("%d\n", overlapping[j]);
    }
  }
  else
  {
    printf("None\n");
  }
}
// basmalla
void mostBorrowedBook()
{
  int most_borrowed = 0;
  int count = 0;
  int max_count = 0;
  for (int i = 0; i < countBorrowed; i++)
  {
    count = 0;
    for (int j = 0; j < countBorrowed; j++)
    {
      if (borrowed[i][0] == borrowed[j][0])
      {
        count++;
      }
    }
    if (count > max_count)
    {
      max_count = count;
      most_borrowed = borrowed[i][0];
    }
  }

  printf("%d\n", most_borrowed);
} // basmalla
void Members_Less_n(int limit)
{
  int count;
  for (int i = 0; i < countMembers; i++)
  {
    count = 0;

    for (int j = 0; j < countBorrowed; j++)
    {
      if (Members_ID_List[i][0] == borrowed[j][1])
      {
        count++;
      }
    }

    if (count < limit)
    {
      printf("%d\n", Members_ID_List[i][0]);
    }
  }
}
// Ahmed Stem
void Number_Members()
{
  printf("%d\n", countMembers);
}

// Ahmed Stem
void List_Book_Borrowers(int bookID)
{
  bool found = false;
  for (int i = 0; i < countBorrowed; i++)
  {
    if (borrowed[i][0] == bookID)
    {
      printf("%d\n", borrowed[i][1]);
      found = true;
    }
  }
  if (!found)
  {
    printf("none\n");
  }
}

// Habiba
int Book_ID_min()
{
  int min = booksList_ID_List[0];
  {
    for (int i = 0; i < countBooks; i++)
      if (booksList_ID_List[i] < min)
        min = booksList_ID_List[i];
  }
  printf("%d\n", min);
}
// Hapipa
int Books_per_Members()
{
  int Books_Count;
  for (int i = 0; i < countMembers; i++)
  {
    Books_Count = 0;

    printf("%d ", Members_ID_List[i][0]);

    for (int j = 0; j < countBorrowed; j++)
    {
      if (borrowed[j][1] == Members_ID_List[i][0])
      {
        Books_Count++;
      }
    }
    printf("%d\n", Books_Count);
  }
}

/*
3.bookIDMin
int bookIDMin()
{
  int min = books[0][0];
  for (int i = 0; i < countBooks; i++)
  {
    if (books[i][0] < min)
      min = books[i][0];
  }
  printf("%d\n", min);
  return 0;
}
happipa
int books_per_Members()
{

  int booksNumber;
  for (int i = 0; i < countMembers; i++)
    booksNumber = 0;
  printf("%d ", Members_ID_List[i]);
  for (int j = 0; j < countBorrowed; j++)
    if (borrowed[i][1] == Members_ID_List[i])
    {

      borrowed[i][0];
      printf("%d\n", borrowed[i][0]);
      x = 0;
      booksNumber++;
    }
}

habiba
books per member

for(go on the borrowed members int i ){

count = 0
printf(memberi )
for(go on the borrowed members j=i j<count boorrwed){
if (memberi == member j){
count+=1
}

}
}
printf(count)
}





book id min
int smallest = 0
for (go on the ids int i){
if (idi < smallest){
smallest = idi
}
}
print(smallest (newline))

basmalla:
most borrowed = 0
count = 0
max count = 0
for (go in the borrowed list i)
for(go  again j){
if(borrwed book i == borrowed book j){
count++
}
if count>maxcount{
max count =count
most borrowed = borrowed i
}
}



Members_Less n (int limit)

int count

for (go on the memberslist int i ){
count = 0
for ( go on the borrowedlist int j){
if( memberlist[i]==borrowedlist[j]){
count++
}
}
if count < limit {
print(memberlist[i])
}
}


4.Ahmed thanwya
books unborrowed

for( go on books ids int i){
check = 0
for(go on borrowed books int j){
if(idi == borrowedj){
break
}else{
check=1
}
}
if(check) print(idi)
}


list_member_id (int member)
for(go on borrwed members int i)
if(member == borrowed memberi)
printf(borrowed book i (newline))

Sama:
overlaping (int bookId)
int count = 0
int overlapping[countborrowed]
for (go on the borrowedbooks int i){
if (borroedbook[i] = bookId){
overlapping[count] = borrowedMember[i]

count++
}
if (count >= 2){
for (go on the list of overlaping int j, j<count)
printf(overlapping[i])
}else
 printf(none)
*/
