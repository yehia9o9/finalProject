// libraries
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// constants
#define MAX_BOOKS 50
#define MAX_MEMBERS 30
#define MAX_BORROW 150

// counts
int countBooks = 0;
int countMembers = 0;
int countBorrowed = 0;
int countdate = 0;

// lists of input
// 1.books
int booksList_ID_List[MAX_BOOKS];
int booksList_Copies_List[MAX_BOOKS];
// 2.member
int Members_ID_List[MAX_MEMBERS];
// 3.borrowed
int borrowed[MAX_BORROW][2];
int date[MAX_BORROW][3];

// declaration
// 1.input
int inputBooks();
int inputMembers();
int inputBorrowed();
// 2.action functions
int Books_Borrowed_Days();
void books_unborrowed();
void list_member_books(int member);
void printBooksAvailable();
void printNumberBooks();
void overlapping(int bookID);
void mostBorrowedBook();
void Members_Less_n(int limit);
void Number_Members();
void List_Book_Borrowers(int bookID);
int Book_ID_min();
int Books_per_Members();
// checking functions
int checkDate(int i);

// main
int main()
{
  // input
  char section[50];
  char cmd[50];
  // input
  while (scanf("%50s", section) != EOF)
  {

    if (strcmp(section, "Books:") == 0)
    {
      inputBooks();
    }
    else if (strcmp(section, "Members:") == 0)
    {
      inputMembers();
    }
    else if (strcmp(section, "Borrowed_Books:") == 0)
    {

      inputBorrowed();
      break;
    }
    else
    {
      printf("this section does not exist\n");
    }
  }

  // commands
  while (true)
  {
    scanf("%50s", cmd);
    // Sama
    if (strcmp(cmd, "Number_Books") == 0)
    {
      printNumberBooks();
    }
    // Ahmed Stem
    else if (strcmp(cmd, "Number_Members") == 0)
    {
      Number_Members();
    }
    // hapipa
    else if (strcmp(cmd, "Book_ID_Min") == 0)
    {
      Book_ID_min();
    }
    // sama
    else if (strcmp(cmd, "Books_Available") == 0)
    {
      printBooksAvailable();
    }
    // Ahmed Stem
    else if (strcmp(cmd, "List_Book_Borrowers") == 0)
    {
      int bookID;
      scanf("%d", &bookID);
      List_Book_Borrowers(bookID);
    }
    // Ahmed Thanwya
    else if (strcmp(cmd, "List_Member_Books") == 0)
    {
      int member;
      scanf("%d", &member);
      list_member_books(member);
    }
    // basmalla
    else if (strcmp(cmd, "Most_Borrowed") == 0)
    {
      mostBorrowedBook();
    }
    // basmalla
    else if (strcmp(cmd, "Members_Less") == 0)
    {
      int limit;
      scanf("%d", &limit);
      Members_Less_n(limit);
    } // Ahmed Thanwya
    else if (strcmp(cmd, "Books_Unborrowed") == 0)
    {
      books_unborrowed();
    }
    else if (strcmp(cmd, "Books_Per_Member") == 0)
    {
      Books_per_Members();
    }
    else if (strcmp(cmd, "Books_Borrowed_Days") == 0)
    {
      Books_Borrowed_Days();
    }
    // sama
    else if (strcmp(cmd, "Overlapping_Borrowers") == 0)
    {
      int bookIDOver;
      scanf("%d", &bookIDOver);
      overlapping(bookIDOver);
    } // hapipa

    else if (strcmp(cmd, "Quit") == 0)
    {
      printf("Thanks !");
      break;
    }
    else
    {
      printf("Wrong command\n");
    }
  }
}

// books
int inputBooks()
{
  int books_ID;
  int books_Copies;

  while (true)
  {

    if (scanf("%d %d", &books_ID, &books_Copies) != 2 || countBooks == MAX_BOOKS)
    {
      break;
    }

    booksList_ID_List[countBooks] = books_ID;
    booksList_Copies_List[countBooks] = books_Copies;
    countBooks++;
  }
}

// members

int inputMembers()
{
  int member_ID;

  while (true)
  {

    if (scanf("%d", &member_ID) != 1 || countMembers == MAX_MEMBERS)
    {
      break;
    }

    Members_ID_List[countMembers] = member_ID;
    countMembers++;
  }
}
// borrowed
int inputBorrowed()
{
  int column1 = 0;
  int column2 = 0;
  int booksBorrowed, membersBorrowed;
  int days, months, year;
  int foundMember;
  int foundBook;
    while (true)
  {
    foundBook = 0;
    if (scanf("%d %d %d/%d/%d", &booksBorrowed, &membersBorrowed, &days, &months, &year) == EOF || countBorrowed == MAX_BORROW)
    {
      break;
    }
    borrowed[countBorrowed][0] = booksBorrowed;
    borrowed[countBorrowed][1] = membersBorrowed;
    date[countdate][0] = days;
    date[countdate][1] = months;
    date[countdate][2] = year;
    for (int j = 0; j < countMembers; j++)
      {
        foundMember = 0;
        if (Members_ID_List[j] == borrowed[countBorrowed][1])
        {
          foundMember = 1;
          break;
        }
      }
    for (int i = 0; i < countBooks; i++)
    { 
      if (foundMember == 1)
      {
        if (borrowed[countBorrowed][0] == booksList_ID_List[i])
        {
          foundBook = 1;
          if (booksList_Copies_List[i] > 0)
          {
            booksList_Copies_List[i] = booksList_Copies_List[i] - 1;
          }
          else if (booksList_Copies_List[i] <= 0)
          {
            printf("There are no copies for this book\n");
            countBorrowed--;
            countdate--;
          }
        }
      }
      
    }
    if (foundMember == 0)
    {
      printf("This member does not exist\n");
      countBorrowed--;
      countdate--;
    }
    if (foundBook == 0 && foundMember == 1)
    {
      printf("This book does not exist\n");
      countBorrowed--;
      countdate--;
    }
    countBorrowed++;
    countdate++;
  }
}
// check functions
int checkDate(int i)
{
  int check;

  for (int j = i; j >= 0; j--)
  {
    if (i != j || i == 0)
    {
      if ((date[i][0] != date[j][0] || date[i][1] != date[j][1] || date[i][2] != date[j][2]) || i == 0)
      {
        check = 1;
      }
      else if (date[i][0] == date[j][0])
      {
        check = 0;
        break;
      }
    }
  }

  return check;
}

int Books_Borrowed_Days()
{
  for (int i = 0; i < countdate; i++)
  {

    if (checkDate(i) == 1)
    {
      printf("%d/%d/%d\n", date[i][0], date[i][1], date[i][2]);
    }
  }
}
// Ahmed Thanwya
void books_unborrowed()
{
  int check;
  for (int i = 0; i < countBooks; i++)
  {
    check = 1;
    for (int j = 0; j < countBorrowed; j++)
    {
      if (booksList_ID_List[i] == borrowed[j][0])
      {
        check = 0;
        break;
      }
    }

    if (check == 1)
      printf("%d\n", booksList_ID_List[i]);
  }
}
// Ahmed Thanwya
void list_member_books(int member)
{
  int check = 1;
  for (int i = 0; i < countBorrowed; i++)
  {
    if (member == borrowed[i][1])
    {
      printf("%d\n", borrowed[i][0]);
      check = 0;
    }
  }
  if (check)
    printf("none\n");
}

// Sama
void printBooksAvailable()
{
  for (int i = 0; i < countBooks; i++)
  {
    if (booksList_Copies_List[i] > 0)
    {
      printf("%d\n", booksList_ID_List[i]);
    }
  }
}
// Sama
void printNumberBooks()
{
  printf("%d\n",countBooks);
}
// Sama
void overlapping(int bookID)
{
  int count = 0;
  int overlapping[countBorrowed];
  for (int i = 0; i < countBorrowed; i++)
  {
    if (borrowed[i][0] == bookID)
    {
      overlapping[count] = borrowed[i][1];
      count++;
    }
  }
  if (count >= 2)
  {
    for (int j = 0; j < count; j++)
    {
      printf("%d\n", overlapping[j]);
    }
  }
  else
  {
    printf("None\n");
  }
}
// basmalla
void mostBorrowedBook()
{
  int most_borrowed = 0;
  int count = 0;
  int max_count = 0;
  for (int i = 0; i < countBorrowed; i++)
  {
    count = 0;
    for (int j = 0; j < countBorrowed; j++)
    {
      if (borrowed[i][0] == borrowed[j][0])
      {
        count++;
      }
    }
    if (count > max_count)
    {
      max_count = count;
      most_borrowed = borrowed[i][0];
    }
  }

  printf("%d\n", most_borrowed);
} // basmalla
void Members_Less_n(int limit)
{
  int count;
  for (int i = 0; i < countMembers; i++)
  {
    count = 0;

    for (int j = 0; j < countBorrowed; j++)
    {
      if (Members_ID_List[i] == borrowed[j][1])
      {
        count++;
      }
    }

    if (count < limit)
    {
      printf("%d\n", Members_ID_List[i]);
    }
  }
}
// Ahmed Stem
void Number_Members()
{
  printf("%d\n", countMembers);
}

// Ahmed Stem
void List_Book_Borrowers(int bookID)
{
  bool found = false;
  for (int i = 0; i < countBorrowed; i++)
  {
    if (borrowed[i][0] == bookID)
    {
      printf("%d\n", borrowed[i][1]);
      found = true;
    }
  }
  if (!found)
  {
    printf("none\n");
  }
}

// Habiba
int Book_ID_min()
{
  int min = booksList_ID_List[0];
  {
    for (int i = 0; i < countBooks; i++)
      if (booksList_ID_List[i] < min)
        min = booksList_ID_List[i];
  }
  printf("%d\n", min);
}
// Hapipa
int Books_per_Members()
{
  int Books_Count;
  for (int i = 0; i < countMembers; i++)
  {
    Books_Count = 0;

    printf("%d ", Members_ID_List[i]);

    for (int j = 0; j < countBorrowed; j++)
    {
      if (borrowed[j][1] == Members_ID_List[i])
      {
        Books_Count++;
      }
    }
    printf("%d\n", Books_Count);
  }
}

/*
3.bookIDMin
int bookIDMin()
{
  int min = books[0][0];
  for (int i = 0; i < countBooks; i++)
  {
    if (books[i][0] < min)
      min = books[i][0];
  }
  printf("%d\n", min);
  return 0;
}
happipa
int books_per_Members()
{

  int booksNumber;
  for (int i = 0; i < countMembers; i++)
    booksNumber = 0;
  printf("%d ", Members_ID_List[i]);
  for (int j = 0; j < countBorrowed; j++)
    if (borrowed[i][1] == Members_ID_List[i])
    {

      borrowed[i][0];
      printf("%d\n", borrowed[i][0]);
      x = 0;
      booksNumber++;
    }
}

habiba
books per member

for(go on the borrowed members int i ){

count = 0
printf(memberi )
for(go on the borrowed members j=i j<count boorrwed){
if (memberi == member j){
count+=1
}

}
}
printf(count)
}





book id min
int smallest = 0
for (go on the ids int i){
if (idi < smallest){
smallest = idi
}
}
print(smallest (newline))

basmalla:
most borrowed = 0
count = 0
max count = 0
for (go in the borrowed list i)
for(go  again j){
if(borrwed book i == borrowed book j){
count++
}
if count>maxcount{
max count =count
most borrowed = borrowed i
}
}



Members_Less n (int limit)

int count

for (go on the memberslist int i ){
count = 0
for ( go on the borrowedlist int j){
if( memberlist[i]==borrowedlist[j]){
count++
}
}
if count < limit {
print(memberlist[i])
}
}


4.Ahmed thanwya
books unborrowed

for( go on books ids int i){
check = 0
for(go on borrowed books int j){
if(idi == borrowedj){
break
}else{
check=1
}
}
if(check) print(idi)
}


list_member_id (int member)
for(go on borrwed members int i)
if(member == borrowed memberi)
printf(borrowed book i (newline))

Sama:
overlaping (int bookId)
int count = 0
int overlapping[countborrowed]
for (go on the borrowedbooks int i){
if (borroedbook[i] = bookId){
overlapping[count] = borrowedMember[i]

count++
}
if (count >= 2){
for (go on the list of overlaping int j, j<count)
printf(overlapping[i])
}else
 printf(none)
*/
